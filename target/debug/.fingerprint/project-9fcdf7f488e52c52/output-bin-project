{"$message_type":"diagnostic","message":"unresolved import `serde`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":22,"byte_end":27,"line_start":2,"line_end":2,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":10}],"label":"use of undeclared crate or module `serde`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `serde`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `serde`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":397,"byte_end":422,"line_start":17,"line_end":17,"column_start":5,"column_end":30,"is_primary":true,"text":[{"text":"    Err::<_, warp::Rejection>(warp::reject::not_found())","highlight_start":5,"highlight_end":30}],"label":"cannot infer type of the type parameter `T` declared on the enum `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: Reply`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following types implement trait `Reply`:\n  &'static [u8]\n  &'static str\n  (T,)\n  Box<T>\n  Cow<'static, str>\n  Html<T>\n  Infallible\n  Json\nand 15 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Err::<_, warp::Rejection>(warp::reject::not_found())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type of the type parameter `T` declared on the enum `Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: cannot satisfy `_: Reply`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following types implement trait `Reply`:\u001b[0m\n\u001b[0m             &'static [u8]\u001b[0m\n\u001b[0m             &'static str\u001b[0m\n\u001b[0m             (T,)\u001b[0m\n\u001b[0m             Box<T>\u001b[0m\n\u001b[0m             Cow<'static, str>\u001b[0m\n\u001b[0m             Html<T>\u001b[0m\n\u001b[0m             Infallible\u001b[0m\n\u001b[0m             Json\u001b[0m\n\u001b[0m           and 15 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function is expected to take 1 argument, but it takes 0 arguments","code":{"code":"E0593","explanation":"You tried to supply an `Fn`-based type with an incorrect number of arguments\nthan what was expected.\n\nErroneous code example:\n\n```compile_fail,E0593\nfn foo<F: Fn()>(x: F) { }\n\nfn main() {\n    // [E0593] closure takes 1 argument but 0 arguments are required\n    foo(|y| { });\n}\n```\n\nYou have to provide the same number of arguments as expected by the `Fn`-based\ntype. So to fix the previous example, we need to remove the `y` argument:\n\n```\nfn foo<F: Fn()>(x: F) { }\n\nfn main() {\n    foo(|| { }); // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":190,"byte_end":198,"line_start":9,"line_end":9,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"        .and_then(handle_error);","highlight_start":10,"highlight_end":18}],"label":"expected function that takes 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":323,"byte_end":391,"line_start":16,"line_end":16,"column_start":1,"column_end":69,"is_primary":false,"text":[{"text":"async fn handle_error() -> Result<impl warp::Reply, warp::Rejection>{","highlight_start":1,"highlight_end":69}],"label":"takes 0 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required for `fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}` to implement `warp::generic::Func<(warp::fs::File,)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0593]\u001b[0m\u001b[0m\u001b[1m: function is expected to take 1 argument, but it takes 0 arguments\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .and_then(handle_error);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected function that takes 1 argument\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn handle_error() -> Result<impl warp::Reply, warp::Rejection>{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtakes 0 arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}` to implement `warp::generic::Func<(warp::fs::File,)>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `recover` exists for struct `AndThen<And<Exact<Opaque<&str>>, ...>, ...>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":237,"byte_end":244,"line_start":11,"line_end":11,"column_start":23,"column_end":30,"is_primary":true,"text":[{"text":"    let result = proj.recover(handle_rejection);","highlight_start":23,"highlight_end":30}],"label":"method cannot be called on `AndThen<And<Exact<Opaque<&str>>, ...>, ...>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ec/.cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.7/src/filter/and_then.rs","byte_start":263,"byte_end":287,"line_start":12,"line_end":12,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"pub struct AndThen<T, F> {","highlight_start":1,"highlight_end":25}],"label":"doesn't satisfy `_: FilterBase` or `_: Filter`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the full type name has been written to '/home/ec/project/target/debug/deps/project-9fcdf7f488e52c52.long-type-15421561601611646750.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following trait bounds were not satisfied:\n`warp::filter::and_then::AndThen<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>>, fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}>: warp::filter::FilterBase`\nwhich is required by `warp::filter::and_then::AndThen<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>>, fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}>: warp::Filter`\n`&warp::filter::and_then::AndThen<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>>, fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}>: warp::filter::FilterBase`\nwhich is required by `&warp::filter::and_then::AndThen<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>>, fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}>: warp::Filter`\n`&mut warp::filter::and_then::AndThen<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>>, fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}>: warp::filter::FilterBase`\nwhich is required by `&mut warp::filter::and_then::AndThen<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>>, fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}>: warp::Filter`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `recover` exists for struct `AndThen<And<Exact<Opaque<&str>>, ...>, ...>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:11:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let result = proj.recover(handle_rejection);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `AndThen<And<Exact<Opaque<&str>>, ...>, ...>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/ec/.cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.7/src/filter/and_then.rs:12:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct AndThen<T, F> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: FilterBase` or `_: Filter`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/home/ec/project/target/debug/deps/project-9fcdf7f488e52c52.long-type-15421561601611646750.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `warp::filter::and_then::AndThen<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>>, fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}>: warp::filter::FilterBase`\u001b[0m\n\u001b[0m           which is required by `warp::filter::and_then::AndThen<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>>, fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}>: warp::Filter`\u001b[0m\n\u001b[0m           `&warp::filter::and_then::AndThen<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>>, fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}>: warp::filter::FilterBase`\u001b[0m\n\u001b[0m           which is required by `&warp::filter::and_then::AndThen<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>>, fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}>: warp::Filter`\u001b[0m\n\u001b[0m           `&mut warp::filter::and_then::AndThen<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>>, fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}>: warp::filter::FilterBase`\u001b[0m\n\u001b[0m           which is required by `&mut warp::filter::and_then::AndThen<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>>, fn() -> impl Future<Output = Result<impl Reply, Rejection>> {handle_error}>: warp::Filter`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0283, E0432, E0593, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0283, E0432, E0593, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0283`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0283`.\u001b[0m\n"}
